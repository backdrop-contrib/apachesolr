<?php

/**
 * @file
 *   Install and related hooks for apachesolr_search.
 */

/**
 * Implements hook_requirements().
 */
function apachesolr_requirements($phase) {
  $config = config('apachesolr.settings');
  $requirements = array();
  if ($phase != 'runtime') {
    return $requirements;
  }
  // Ensure translations don't break at install time
  $t = get_t();
  $has_settings = FALSE;
  $id = apachesolr_default_environment();
  $environment = apachesolr_environment_load($id);
  if (!$environment || empty($environment['url'])) {
    $requirements['apachesolr'] = array(
      'title' => $t('Apache Solr'),
      'value' => $t('Missing environment configuration'),
      'description' => $t('Missing or invalid Solr environment record for the default environment ID %id.', array('%id' => $id)),
      'severity' => REQUIREMENT_ERROR,
    );
  }
  else {
    $has_settings = TRUE;
  }

  if ($has_settings) {
    $ping = FALSE;
    try {
      $solr = apachesolr_get_solr($id);
      $ping = @$solr->ping($config->get('apachesolr_ping_timeout'));
      // If there is no $solr object, there is no instance available, so don't continue.
      if (!$ping) {
        throw new Exception(t('No Solr instance available when checking requirements.'));
      }
    }
    catch (Exception $e) {
      watchdog('Apache Solr', nl2br(check_plain($e->getMessage())), NULL, WATCHDOG_ERROR);
    }
    $value = $ping ? $t('Your site has contacted the Apache Solr server.') : $t('Your site was unable to contact the Apache Solr server.');
    $severity = $ping ? REQUIREMENT_OK : REQUIREMENT_ERROR;
    $requirements['apachesolr'] = array(
      'title' => $t('Apache Solr'),
      'value' => $value,
      'description' => $t('Default environment url: <br/> %url',  array('%url' => $environment['url'])),
      'severity' => $severity,
    );
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function apachesolr_install() {
  module_load_include('inc', 'apachesolr', 'apachesolr_search.admin');
  module_load_include('inc', 'apachesolr', 'apachesolr.index');
  // Create one MLT block.
  apachesolr_search_mlt_save_block(array('name' => t('More like this')));
  db_insert('apachesolr_environment')->fields(array('env_id' => 'solr', 'name' => 'localhost server', 'url' => 'http://localhost:8983/solr'))->execute();

  // Initialize the entities to index. We enable all node types by default
  $info = entity_get_info('node');
  $bundles = array_keys($info['bundles']);
  $env_id = apachesolr_default_environment();
  apachesolr_index_set_bundles($env_id, 'node', $bundles);

  backdrop_set_message(st('Apache Solr is enabled. Visit the <a href="@settings_link">settings page</a>.', array('@settings_link' => url('admin/config/search/apachesolr'))));
}

/**
 * Implements hook_enable().
 */
function apachesolr_enable() {
  // Completely build the index table.
  module_load_include('inc', 'apachesolr', 'apachesolr.index');
  $env_id = apachesolr_default_environment();
  apachesolr_index_mark_for_reindex($env_id);
}

/**
 * Implements hook_schema().
 */
function apachesolr_schema() {

  $table = backdrop_get_schema_unprocessed('system', 'cache');
  $table['description'] = 'Cache table for apachesolr to store Luke data and indexing information.';
  $schema['cache_apachesolr'] = $table;

  $schema['apachesolr_environment'] = array(
    'description' => 'The Solr search environment table.',
    // Enable CTools exportables based on this table.
    'export' => array(
      // Environment machine name.
      'key' => 'env_id',
      // Description of key.
      'key name' => 'Environment machine name',
      // Apache Solr doesn't allow disabling environments.
      'can disable' => FALSE,
      // Variable name to use in exported code.
      'identifier' => 'environment',
      // Thin wrapper for the environment save callback.
      'save callback' => 'apachesolr_ctools_environment_save',
      // Thin wrapper for the environment delete callback.
      'delete callback' => 'apachesolr_ctools_environment_delete',
      // Includes the environment variables in 'conf' as well as the fields in this table.
      'export callback' => 'apachesolr_ctools_environment_export',
      // Use the same hook as the API name below.
      'default hook' => 'apachesolr_environments',
      // CTools API implementation.
      'api' => array(
        'owner' => 'apachesolr',
        'api' => 'apachesolr_environments',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'env_id' => array(
        'description' => 'Unique identifier for the environment',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Human-readable name for the server',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'url' => array(
        'description' => 'Full url for the server',
        'type' => 'varchar',
        'length' => 1000,
        'not null' => TRUE,
      ),
      'service_class' => array(
        'description' => 'Optional class name to use for connection',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
    ),
    'primary key' => array('env_id'),
  );
  $schema['apachesolr_environment_variable'] = array(
    'description' => 'Variable values for each Solr search environment.',
    'fields' => array(
      'env_id' => array(
        'description' => 'Unique identifier for the environment',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The name of the variable.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'value' => array(
        'description' => 'The value of the variable.',
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
      ),
    ),
    'primary key' => array('env_id', 'name'),
  );

  // Technically the entity system does not require an integer ID.
  // However, documentation mentions :
  // id: The name of the property that contains the primary id of the
  // entity. Every entity object passed to the Field API must have this
  // property and its value must be numeric.

  //Predefine an amount of types that get their own table
  $types = array(
      'other' => 'apachesolr_index_entities',
      'node' => 'apachesolr_index_entities_node',
  );
  foreach ($types as $type => $table) {
    $schema[$table] = array(
      'description' => 'Stores a record of when an entity changed to determine if it needs indexing by Solr.',
      'fields' => array(
        'entity_type' => array(
          'description' => 'The type of entity.',
          'type' => 'varchar',
          'length' => 32,
          'not null' => TRUE,
        ),
        'entity_id' => array(
          'description' => 'The primary identifier for an entity.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'bundle' => array(
          'description' => 'The bundle to which this entity belongs.',
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
        ),
        'status' => array(
          'description' => 'Boolean indicating whether the entity should be in the index.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 1,
        ),
        'changed' => array(
          'description' => 'The Unix timestamp when an entity was changed.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
      ),
      'indexes' => array(
        'bundle_changed' => array('bundle', 'changed'),
      ),
      'primary key' => array('entity_id'),
    );
    if ($type == 'other') {
      // Need the entity type also in the pkey for multiple entities in one table.
      $schema[$table]['primary key'][] = 'entity_type';
    }
  }

  $schema['apachesolr_index_bundles'] = array(
    'description' => 'Records what bundles we should be indexing for a given environment.',
    'fields' => array(
      'env_id' => array(
        'description' => 'The name of the environment.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'description' => 'The type of entity.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'bundle' => array(
        'description' => 'The bundle to index.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('env_id', 'entity_type', 'bundle'),
  );
  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function apachesolr_uninstall() {
  // Remove variables.
  config_clear('apachesolr.settings', 'apachesolr_default_environment');
  config_clear('apachesolr.settings', 'apachesolr_rows');
  config_clear('apachesolr.settings', 'apachesolr_site_hash');
  config_clear('apachesolr.settings', 'apachesolr_index_last');
  config_clear('apachesolr.settings', 'apachesolr_search_mlt_blocks');
  config_clear('apachesolr.settings', 'apachesolr_cron_limit');
  config_clear('apachesolr.settings', 'apachesolr_exclude_nodeapi_types');
  config_clear('apachesolr.settings', 'apachesolr_failure');
  config_clear('apachesolr.settings', 'apachesolr_index_updated');
  config_clear('apachesolr.settings', 'apachesolr_read_only');
  config_clear('apachesolr.settings', 'apachesolr_set_nodeapi_messages');
  config_clear('apachesolr.settings', 'apachesolr_last_optimize');
  config_clear('apachesolr.settings', 'apachesolr_update_from_6303');
  // Remove blocks.
}

/**
 * Implements hook_update_last_removed().
 */
function apachesolr_update_last_removed() {
  return 7018;
}

/**
 * Migrate apachesolr variables to config.
 */
function apachesolr_update_1000() {
  $config = config('apachesolr.settings');
  $config->set('apachesolr_set_nodeapi_messages', update_variable_get('apachesolr_set_nodeapi_messages', 1));
  $config->set('apachesolr_cron_limit', update_variable_get('apachesolr_cron_limit', 50));
  $config->set('apachesolr_failure', update_variable_get('apachesolr_failure', 'apachesolr:show_error'));
  $config->set('apachesolr_watchdog_successes', update_variable_get('apachesolr_watchdog_successes', TRUE));
  $config->set('apachesolr_luke_limit', update_variable_get('apachesolr_luke_limit', 20000));
  $config->set('apachesolr_ping_timeout', update_variable_get('apachesolr_ping_timeout', 4));
  $config->set('apachesolr_index_user', update_variable_get('apachesolr_index_user', 0));
  $config->set('apachesolr_tags_to_index', update_variable_get('apachesolr_tags_to_index', null));
  $config->set('apachesolr_exclude_nodeapi_types', update_variable_get('apachesolr_exclude_nodeapi_types', array()));
  $config->set('apachesolr_cron_mass_limit', update_variable_get('apachesolr_cron_mass_limit', 500));
  $config->set('apachesolr_report_readonly_to_watchdog', update_variable_get('apachesolr_report_readonly_to_watchdog', TRUE));
  $config->set('apachesolr_update_from_6303', update_variable_get('apachesolr_update_from_6303', false));
  $config->set('apachesolr_host', update_variable_get('apachesolr_host', 'localhost'));
  $config->set('apachesolr_port', update_variable_get('apachesolr_port', '8983'));
  $config->set('apachesolr_path', update_variable_get('apachesolr_path', '/solr'));
  $config->set('apachesolr_service_class', update_variable_get('apachesolr_service_class', 'BackdropApacheSolrService'));
  $config->set('apachesolr_default_server', update_variable_get('apachesolr_default_server', 'solr'));
  $config->set('apachesolr_enabled_facets', update_variable_get('apachesolr_enabled_facets', NULL));
  $config->set('apachesolr_search_query_fields', update_variable_get('apachesolr_search_query_fields', NULL));
  $config->set('apachesolr_search_type_boosts', update_variable_get('apachesolr_search_type_boosts', NULL));
  $config->set('apachesolr_search_comment_boost', update_variable_get('apachesolr_search_comment_boost', NULL));
  $config->set('apachesolr_search_changed_boost', update_variable_get('apachesolr_search_changed_boost', NULL));
  $config->set('apachesolr_search_sticky_boost', update_variable_get('apachesolr_search_sticky_boost', NULL));
  $config->set('apachesolr_search_promote_boost', update_variable_get('apachesolr_search_promote_boost', NULL));
  $config->set('apachesolr_search_excluded_types', update_variable_get('apachesolr_search_excluded_types', NULL));
  $config->set('apachesolr_exclude_comments_types', update_variable_get('apachesolr_exclude_comments_types', NULL));
  $config->set('apachesolr_index_last', update_variable_get('apachesolr_index_last', array()));
  $config->set('apachesolr_index_updated', update_variable_get('apachesolr_index_updated', array()));
  $config->set('apachesolr_last_optimize', update_variable_get('apachesolr_last_optimize', 0));
  $config->set('apachesolr_site_hash', update_variable_get('apachesolr_site_hash', ""));
  $config->set('apachesolr_optimize_interval', update_variable_get('apachesolr_optimize_interval', 86400));
  $config->set('apachesolr_optimize_attempt_interval', update_variable_get('apachesolr_optimize_attempt_interval', 3600));
  $config->set('apachesolr_cache_delay', update_variable_get('apachesolr_cache_delay', 300));
  $config->set('apachesolr_default_environment', update_variable_get('apachesolr_default_environment', 'solr'));
  $config->set('apachesolr_environments', update_variable_get('apachesolr_environments', array()));
  $config->set('apachesolr_query_class', update_variable_get('apachesolr_query_class', array( 'file' => 'Solr_Base_Query', 'module' => 'apachesolr', 'class' => 'SolrBaseQuery')));
  $config->set('apachesolr_subquery_class', update_variable_get('apachesolr_subquery_class', array( 'file' => 'Solr_Base_Query', 'module' => 'apachesolr', 'class' => 'SolrFilterSubQuery')));
  $config->set('apachesolr_field_length_limit', update_variable_get('apachesolr_field_length_limit', 32));
  $config->set('apachesolr_search_mlt_blocks', update_variable_get('apachesolr_search_mlt_blocks', array()));
  $config->set('apachesolr_search_taxonomy_links', update_variable_get('apachesolr_search_taxonomy_links', 0));
  $config->set('apachesolr_search_make_default', update_variable_get('apachesolr_search_make_default', 0));
  $config->set('apachesolr_rows', update_variable_get('apachesolr_rows', 10));
  $config->set('apachesolr_search_browse', update_variable_get('apachesolr_search_browse', 'browse'));
  $config->set('apachesolr_search_spellcheck', update_variable_get('apachesolr_search_spellcheck', TRUE));
  $config->set('apachesolr_search_default_search_page', update_variable_get('apachesolr_search_default_search_page', 'core_search'));
  $config->set('apachesolr_search_conditions_callback', update_variable_get('apachesolr_search_conditions_callback', 'apachesolr_search_conditions'));
  $config->set('apachesolr_hl_active', update_variable_get('apachesolr_hl_active', NULL));
  $config->set('apachesolr_hl_textsnippetlength', update_variable_get('apachesolr_hl_textsnippetlength', NULL));
  $config->set('apachesolr_hl_pretag', update_variable_get('apachesolr_hl_pretag', NULL));
  $config->set('apachesolr_hl_posttag', update_variable_get('apachesolr_hl_posttag', NULL));
  $config->set('apachesolr_hl_numsnippets', update_variable_get('apachesolr_hl_numsnippets', NULL));
  $config->set('apachesolr_hl_fieldtohighlight', update_variable_get('apachesolr_hl_fieldtohighlight', NULL));
  $config->set('apachesolr_facetstyle', update_variable_get('apachesolr_facetstyle', NULL));
  $config->set('apachesolr_facet_show_children', update_variable_get('apachesolr_facet_show_children', NULL));
  $config->set('apachesolr_facet_query_limits', update_variable_get('apachesolr_facet_query_limits', NULL));
  $config->set('apachesolr_facet_query_limit_default', update_variable_get('apachesolr_facet_query_limit_default', NULL));
  $config->set('apachesolr_facet_missing', update_variable_get('apachesolr_facet_missing', NULL));
  $config->set('apachesolr_facet_query_initial_limits', update_variable_get('apachesolr_facet_query_initial_limits', NULL));
  $config->set('apachesolr_facet_query_sorts', update_variable_get('apachesolr_facet_query_sorts', NULL));
  $config->set('apachesolr_facet_sort_active', update_variable_get('apachesolr_facet_sort_active', NULL));
  $config->set('apachesolr_operator', update_variable_get('apachesolr_operator', NULL));
  $config->set('apachesolr_logging', update_variable_get('apachesolr_logging', NULL));
  $config->save();

  update_variable_del('apachesolr_set_nodeapi_messages');
  update_variable_del('apachesolr_cron_limit');
  update_variable_del('apachesolr_failure');
  update_variable_del('apachesolr_watchdog_successes');
  update_variable_del('apachesolr_luke_limit');
  update_variable_del('apachesolr_ping_timeout');
  update_variable_del('apachesolr_index_user');
  update_variable_del('apachesolr_tags_to_index');
  update_variable_del('apachesolr_exclude_nodeapi_types');
  update_variable_del('apachesolr_cron_mass_limit');
  update_variable_del('apachesolr_report_readonly_to_watchdog');
  update_variable_del('apachesolr_update_from_6303');
  update_variable_del('apachesolr_host');
  update_variable_del('apachesolr_port');
  update_variable_del('apachesolr_path');
  update_variable_del('apachesolr_service_class');
  update_variable_del('apachesolr_default_server');
  update_variable_del('apachesolr_enabled_facets');
  update_variable_del('apachesolr_search_query_fields');
  update_variable_del('apachesolr_search_type_boosts');
  update_variable_del('apachesolr_search_comment_boost');
  update_variable_del('apachesolr_search_changed_boost');
  update_variable_del('apachesolr_search_sticky_boost');
  update_variable_del('apachesolr_search_promote_boost');
  update_variable_del('apachesolr_search_excluded_types');
  update_variable_del('apachesolr_exclude_comments_types');
  update_variable_del('apachesolr_index_last');
  update_variable_del('apachesolr_index_updated');
  update_variable_del('apachesolr_last_optimize');
  update_variable_del('apachesolr_site_hash');
  update_variable_del('apachesolr_optimize_interval');
  update_variable_del('apachesolr_optimize_attempt_interval');
  update_variable_del('apachesolr_cache_delay');
  update_variable_del('apachesolr_default_environment');
  update_variable_del('apachesolr_environments');
  update_variable_del('apachesolr_query_class');
  update_variable_del('apachesolr_subquery_class');
  update_variable_del('apachesolr_field_length_limit');
  update_variable_del('apachesolr_search_mlt_blocks');
  update_variable_del('apachesolr_search_taxonomy_links');
  update_variable_del('apachesolr_search_make_default');
  update_variable_del('apachesolr_rows');
  update_variable_del('apachesolr_search_browse');
  update_variable_del('apachesolr_search_spellcheck');
  update_variable_del('apachesolr_search_default_search_page');
  update_variable_del('apachesolr_search_conditions_callback');
  update_variable_del('apachesolr_hl_active');
  update_variable_del('apachesolr_hl_textsnippetlength');
  update_variable_del('apachesolr_hl_pretag');
  update_variable_del('apachesolr_hl_posttag');
  update_variable_del('apachesolr_hl_numsnippets');
  update_variable_del('apachesolr_hl_fieldtohighlight');
  update_variable_del('apachesolr_facetstyle');
  update_variable_del('apachesolr_facet_show_children');
  update_variable_del('apachesolr_facet_query_limits');
  update_variable_del('apachesolr_facet_query_limit_default');
  update_variable_del('apachesolr_facet_missing');
  update_variable_del('apachesolr_facet_query_initial_limits');
  update_variable_del('apachesolr_facet_query_sorts');
  update_variable_del('apachesolr_facet_sort_active');
  update_variable_del('apachesolr_operator');
  update_variable_del('apachesolr_logging');
}
